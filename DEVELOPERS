Developers

Install the necessary dependencies :

CMake (Versión 3.0.0 minimum), Git, ligjpeg-turbo, OpenGL,
Qt >=5.4 and a C++ (gcc >=4.6 or clang or Visual Studio) compiler is required.

Ubuntu:

Download and install Qt binaries from http://qt-project.org/downloads

Issue the following to install the necessary dependencies:

   $ sudo apt-get install cmake git ubuntu-dev-tools libjpeg-turbo8-dev

Install OpenGL:

   $ sudo apt-get install libglu1-mesa-dev freeglut3-dev mesa-common-dev


Mac OSX

Download and install Qt binaries from : http://qt-project.org/downloads

Issue the following to install the necessary dependencies:

E.x (Assuming MacPorts is installed, otherwise http://www.macports.org/install.php)

$ sudo port install xcode cmake git libjpeg-turbo

NOTE : Make sure the XCode Command Line Tools are installed


Windows (important to install 64bits version of the libraries if your windows is 64 bits)

Install Cygwin, by downloading and executing

http://cygwin.com/setup-x86_64.exe

During the installation, select these additional packages:

git (category: Devel)
wget (category: Web)
openssh (category: Net)

The CMake included in Cygwin unfortunately doesn’t include
the generator for Nmake (-G "NMake Makefiles" ) so you need to
install CMake for windows :

    http://www.cmake.org/cmake/resources/software.html


Install Microsoft Visual Studio (make sure you install the C++ compilers)

    http://www.microsoft.com/visualstudio/eng/visual-studio-2013


Install Qt (Chose the option with MVSC and OpenGL):

http://qt-project.org/downloads

(Choose the default installation path C:\Qt)

Install NSI installers in Windows :

    http://nsis.sourceforge.net/Download

Install JPEG-Turbo :

    http://www.libjpeg-turbo.org/Documentation/OfficialBinaries

Clone the repository :

git clone <repo>

Build from the source (Windows) :

(Currently Qt does not support Visual Studio 2015)

It can be built in different ways.

- You can use the Cygwin based script called build_cygwin.sh to build it from the Cygwin terminal.
Make sure the script is configured to the paths of your Visual Studio, Qt,
CMake and lijpeg-turbo libraries and that the architecture is set to the one in your system (32 or 64)

Make a directory for the script to copy the build artifacts to. For example ‘st_bin’.

$ mkdir st_bin

(When the build has completed this directory will contain the application and it’s installer).

Then:

In a Cygwin terminal, for a production build type:

$ ~/st_client/build_cygwin.sh  ~/st_client  stclient_production_build   st_bin


or for a development build type:

$ ~/st_client/build_cygwin.sh  ~/st_client  stclient_development_build  st_bin

At the end of the build script, the paths to the executable and to the package
file are printed to the terminal.

- You can can also use CMake-gui to generate a Visual Studio project file that you can load in
your Visual Studio, then you can build the client in Visual Studio. Make sure for this that you set
the CMake configuration variables to find the Qt libraries and jpeg-turbo using the variable CMAKE_PREFIX_PATH

e.g. Set CMAKE_PREFIX_PATH to “C:\Qt\5.5\msvc2013_64\lib\cmake;C:\libjpeg-turbo64” in the CMake-gui.

- You can also build it using Qt creator and the Visual Studio compiler/generator. Once again,
make sure you pass in the configuration of the project the path to libjpeg-turbo.

Build from the source (Ubuntu and MAC).

NOTE: if your CMake installation does not contain macros to find qt5 packages,
you will have to tell cmake to use the macros included in the qt5 binaries :

  -DCMAKE_PREFIX_PATH = /path-to-qt5/path-to-cmake-folder (usually it is in lib/cmake)

We will now proceed to build stVi in "/path/to/build", but any directory where the
user has read/write privileges can be chosen. Issue the following:

  $ cd /path/to/build
  $ cmake [-DCMAKE_INSTALL_PREFIX="/usr/local/bin"] \
             [-DCMAKE_BUILD_TYPE="Debug" | "Release"] \
             [-DCMAKE_PREFIX_PATH="/path/to/libraries"]
                 [-DCMAKE_OSX_SYSROOT=”/path/to/macosx.sdk”]
                 [-DCMAKE_OSX_DEPLOYMENT_TARGET=version]
          [-DSERVER=”production | development | local”]
             /path/to/source

DCMAKE_INSTALL_PREFIX = indicates where to install stVi
CMAKE_BUILD_TYPE = indicates the type of building (Release by default)
CMAKE_PREFIX_PATH = indicates and extra path to look for packages for example the binaries of Qt5.
DCMAKE_OSX_SYSROOT = provides the path to the MacOS X SDK that is to be used
eg: Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.9.sdk/
DCMAKE_OSX_DEPLOYMENT_TARGET = indicates the target MacOS X version
    eg: 10.7 , 10.8 or 10.9

DSERVER = Build stVi to connect to the development, local or production servers

stVi will detect automatically the platform where it is building on and it will generate
the binaries automatically as well.


How to run a test

Assuming stVi has been installed as explained above, it can be
automatically tested by issuing:

  $ cd /path/to/build
  $ make unittest











